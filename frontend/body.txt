
        .config-form {
            max-width: 800px;
            margin: 0 auto;
            background-color: white;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .alert {
            margin-top: 1rem;
        }

        .form-text {
            font-size: 0.85rem;
            color: #6c757d;
        }

        .nav-tabs {
            margin-bottom: 20px;
        }

        .main-nav {
            max-width: 800px;
            margin: 0 auto 20px auto;
            background-color: white;
            padding: 10px 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .main-nav ul {
            list-style: none;
            padding: 0;
            display: flex;
            gap: 20px;
            margin-bottom: 0;
        }

        .main-nav a {
            text-decoration: none;
            color: #0d6efd;
            font-weight: 500;
        }

        .main-nav a.active {
            font-weight: bold;
        }
    </style>
</head>

<body>
    <div class="container">
        <h1 class="text-center mb-4">Video Transcoding Service</h1>

        <nav class="main-nav">
            <ul>
                <li><a href="index.html">Home</a></li>
                <li><a href="config.html" class="active">Configuration</a></li>
                <li><a href="instructions.html">Instructions</a></li>
            </ul>
        </nav>

        <div class="config-form">
            <h2 class="mb-4">System Configuration</h2>

            <ul class="nav nav-tabs" id="configTabs" role="tablist">
                <li class="nav-item">
                    <a class="nav-link active" id="aws-tab" data-bs-toggle="tab" href="#aws" role="tab">AWS
                        Credentials</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" id="ecs-tab" data-bs-toggle="tab" href="#ecs" role="tab">ECS Configuration</a>
                </li>
            </ul>

            <form id="configForm">
                <div class="tab-content">
                    <div class="tab-pane fade show active" id="aws" role="tabpanel">
                        <div class="form-group">
                            <label for="awsRegion">AWS Region:</label>
                            <input type="text" class="form-control" id="awsRegion" required
                                pattern="[a-z]{2}-[a-z]+-\d{1}">
                            <div class="form-text">Example: ap-south-1</div>
                        </div>

                        <div class="form-group">
                            <label for="awsAccessKeyId">AWS Access Key ID:</label>
                            <input type="text" class="form-control" id="awsAccessKeyId" required>
                        </div>

                        <div class="form-group">
                            <label for="awsSecretAccessKey">AWS Secret Access Key:</label>
                            <input type="password" class="form-control" id="awsSecretAccessKey" required>
                        </div>

                        <div class="form-group">
                            <label for="s3BucketName">S3 Bucket Name:</label>
                            <input type="text" class="form-control" id="s3BucketName" required>
                            <div class="form-text">Enter the exact bucket name without any additional text</div>
                        </div>
                    </div>

                    <div class="tab-pane fade" id="ecs" role="tabpanel">
                        <div class="form-group">
                            <label for="ecsCluster">ECS Cluster ARN:</label>
                            <input type="text" class="form-control" id="ecsCluster" required>
                            <div class="form-text">Example: arn:aws:ecs:region:account:cluster/name</div>
                        </div>

                        <div class="form-group">
                            <label for="ecsTaskDefinition">ECS Task Definition:</label>
                            <input type="text" class="form-control" id="ecsTaskDefinition" required>
                            <div class="form-text">Example: task-name:1</div>
                        </div>

                        <div class="form-group">
                            <label for="ecsSubnets">ECS Subnet IDs:</label>
                            <input type="text" class="form-control" id="ecsSubnets" required>
                            <div class="form-text">Enter subnet IDs separated by commas (e.g., subnet-xxx,subnet-yyy)
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="ecsSecurityGroups">ECS Security Group IDs:</label>
                            <input type="text" class="form-control" id="ecsSecurityGroups" required>
                            <div class="form-text">Enter security group IDs separated by commas (e.g., sg-xxx,sg-yyy)
                            </div>
                        </div>
                    </div>
                </div>

                <div class="d-grid gap-2">
                    <button type="submit" class="btn btn-primary">Save Configuration</button>
                    <button type="button" class="btn btn-secondary" onclick="testConnection()">Test Connection</button>
                </div>
            </form>
            <div id="alert" class="alert" style="display: none;"></div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', async () => {
            const form = document.getElementById('configForm');
            const alert = document.getElementById('alert');

            // Load existing configuration
            try {
                const response = await fetch('/api/config');
                const data = await response.json();

                if (data.configured && data.config) {
                    document.getElementById('awsRegion').value = data.config.AWS_REGION || '';
                    document.getElementById('awsAccessKeyId').value = data.config.AWS_ACCESS_KEY_ID || '';
                    document.getElementById('s3BucketName').value = data.config.S3_BUCKET_NAME || '';
                    document.getElementById('ecsCluster').value = data.config.ECS_CLUSTER || '';
                    document.getElementById('ecsTaskDefinition').value = data.config.ECS_TASK_DEFINITION || '';
                    document.getElementById('ecsSubnets').value = data.config.ECS_SUBNETS || '';
                    document.getElementById('ecsSecurityGroups').value = data.config.ECS_SECURITY_GROUPS || '';
                }
            } catch (error) {
                showAlert('Error loading configuration', 'danger');
            }

            form.addEventListener('submit', async (e) => {
                e.preventDefault();

                const config = {
                    AWS_REGION: document.getElementById('awsRegion').value,
                    AWS_ACCESS_KEY_ID: document.getElementById('awsAccessKeyId').value,
                    AWS_SECRET_ACCESS_KEY: document.getElementById('awsSecretAccessKey').value,
                    S3_BUCKET_NAME: document.getElementById('s3BucketName').value,
                    ECS_CLUSTER: document.getElementById('ecsCluster').value,
                    ECS_TASK_DEFINITION: document.getElementById('ecsTaskDefinition').value,
                    ECS_SUBNETS: document.getElementById('ecsSubnets').value,
                    ECS_SECURITY_GROUPS: document.getElementById('ecsSecurityGroups').value
                };

                try {
                    const response = await fetch('/api/config', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(config)
                    });

                    const data = await response.json();

                    if (response.ok) {
                        showAlert(data.message || 'Configuration saved successfully', 'success');
                    } else {
                        showAlert(data.error || 'Failed to save configuration', 'danger');
                    }
                } catch (error) {
                    showAlert('Error saving configuration', 'danger');
                }
            });
        });

        async function testConnection() {
            const alert = document.getElementById('alert');
            showAlert('Testing connection...', 'info');

            try {
                const config = {
                    AWS_REGION: document.getElementById('awsRegion').value,
                    AWS_ACCESS_KEY_ID: document.getElementById('awsAccessKeyId').value,
                    AWS_SECRET_ACCESS_KEY: document.getElementById('awsSecretAccessKey').value,
                    S3_BUCKET_NAME: document.getElementById('s3BucketName').value,
                    ECS_CLUSTER: document.getElementById('ecsCluster').value,
                    ECS_TASK_DEFINITION: document.getElementById('ecsTaskDefinition').value,
                    ECS_SUBNETS: document.getElementById('ecsSubnets').value,
                    ECS_SECURITY_GROUPS: document.getElementById('ecsSecurityGroups').value
                };

                const response = await fetch('/api/test-connection', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(config)
                });

                const data = await response.json();

                if (response.ok) {
                    showAlert('Connection test successful!', 'success');
                } else {
                    showAlert(data.error || 'Connection test failed', 'danger');
                }
            } catch (error) {
                showAlert('Error testing connection', 'danger');
            }
        }

        function showAlert(message, type) {
            const alert = document.getElementById('alert');
            alert.textContent = message;
            alert.className = `alert alert-${type}`;
            alert.style.display = 'block';

            if (type === 'success') {
                setTimeout(() => {
                    alert.style.display = 'none';
                }, 5000);
            }
        }
    </script>
</body>

</html>